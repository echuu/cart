// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "cart_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test
arma::mat test(arma::mat data);
RcppExport SEXP _cart_test(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(test(data));
    return rcpp_result_gen;
END_RCPP
}
// testBuildTree
arma::uvec testBuildTree(arma::mat z, arma::uvec rows);
RcppExport SEXP _cart_testBuildTree(SEXP zSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(testBuildTree(z, rows));
    return rcpp_result_gen;
END_RCPP
}
// sse
double sse(arma::vec x, int n, double xbar);
RcppExport SEXP _cart_sse(SEXP xSEXP, SEXP nSEXP, SEXP xbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type xbar(xbarSEXP);
    rcpp_result_gen = Rcpp::wrap(sse(x, n, xbar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cart_test", (DL_FUNC) &_cart_test, 1},
    {"_cart_testBuildTree", (DL_FUNC) &_cart_testBuildTree, 2},
    {"_cart_sse", (DL_FUNC) &_cart_sse, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
